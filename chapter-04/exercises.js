////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  let output = [];
  if (start === end) {return output}
if (step === undefined) {
  for (let i = start; i <= end; i++) {output.push(i)}
} else if (step < 0) {
  for (let i = start; i >= end; i += step * -1) {output.push(i)}
} else {
  for (let i = start; i <= end; i += step) {output.push(i)}
}
  return output;

}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
output = array.reduce(function (end, now) {return end += now}, 0);
return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
output = [];
array.map(function(value) {output.unshift(value)});
return output;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array, input=[]) {
  // if (array.length === 0 && input.length === 0) {
  //   return array
  
  // }else if (array.length === 0) {
  //   array.push(input)
  //   return array;
  // }
  // input.unshift(array[0]);
  // array.shift;
  // return reverseArrayInPlace(array, input);
  for (let i = 0; i < array.length; i++) {input.push(array[i])}
    for (let x = 0; x < array.length; x++) {
    array[x] = input[input.length - (1 + x)];
  }
  return array
  

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

let arrayToList = array => {
  let rest = null;
  for (let i = array.length - 1; i >= 0; i--) {
    rest = {value: array[i], rest:rest};
    }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output=[]) {
  if (list.rest === null) {
    output.push(list.value);
    return output;
    }
  output.push(list.value);
  return listToArray(list.rest, output);
};

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {value : element, rest: list};
  }


////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  let thang = list;
    if (number === 0) {
      return thang.value
    } else if (thang.rest) {
      if (thang.rest === null) {
        return undefined
      } else {
        thang = thang.rest;
      return nth(thang, number - 1);
    }
  }
  
};

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

let deepEqual = function(x, y) {
  if (typeof x !== 'object' || typeof y !== 'object') {return x === y}
  let xkey = Object.keys(x);
  let ykey = Object.keys(y);
  if (x.length !== y.length) {return false}
  for (let m = 0; m < x.length; x++) {
    if (!ykey[m].includes(xkey[m]) || !deepEqual(x[xkey[m]], y[key[m]]))
      return false;
  }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};